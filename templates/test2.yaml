AWSTemplateFormatVersion: '2010-09-09'
Description: Windows Server 2022 with SSM Document Execution

Parameters:
  KeyName:
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance.'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'JakeMelli-EC2Launch-test'
    ConstraintDescription: 'Must be the name of an existing EC2 KeyPair.'
  SGID:
    Type: AWS::EC2::SecurityGroup::Id
    Default: 'sg-009c273aca78c9346'
  SubnetID:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-06dd84208b9f6522f
  QSS3BucketName:
    Type: String
    Default: 'quickstart-sios-datakeeper'
  QSS3BucketRegion: 
    Type: String
    Default: 'us-east-1'
  QSS3KeyPrefix: 
    Type: String
    Default: 'ec2launch/'
  URLSuffix:
    Type: String
    Default: ${AWS::URLSuffix}

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, "aws-ia-us-east-1"]


Resources:
  MyInstanceRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "ssm.${AWS::URLSuffix}"
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        - PolicyName: aws-quick-start-s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub [
                      "arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*",
                      S3Bucket:
                        !If [
                          UsingDefaultBucket,
                          !Sub "${QSS3BucketName}-${AWS::Region}",
                          !Ref QSS3BucketName,
                        ],
                    ]
                  - !Sub [
                      "arn:${AWS::Partition}:s3:::${S3Bucket}",
                      S3Bucket:
                        !If [
                          UsingDefaultBucket,
                          !Sub "${QSS3BucketName}-${AWS::Region}",
                          !Ref QSS3BucketName,
                        ],
                    ]
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::aws-ssm-${AWS::Region}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::amazon-ssm-${AWS::Region}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::amazon-ssm-packages-${AWS::Region}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${AWS::Region}-birdwatcher-prod/*"
                  - !Sub "arn:${AWS::Partition}:s3:::patch-baseline-snapshot-${AWS::Region}/*"
                Effect: Allow
        - PolicyName: ssm-custom-s3-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::aws-ssm-${AWS::Region}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::aws-windows-downloads-${AWS::Region}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::amazon-ssm-${AWS::Region}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::amazon-ssm-packages-${AWS::Region}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${AWS::Region}-birdwatcher-prod/*"
                  - !Sub "arn:${AWS::Partition}:s3:::patch-baseline-snapshot-${AWS::Region}/*"
                Effect: Allow
        - PolicyName: QS-MSSQL-SSM
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: "*"
        - PolicyName: cloudformation-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"
        - PolicyName: ssm-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ssm:StartAutomationExecution
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${MySSMDocument}:$DEFAULT
              - Effect: Allow
                Action: ssm:SendCommand
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-JoinDirectoryServiceDomain
              - Effect: Allow
                Action: ssm:SendCommand
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunRemoteScript
              - Effect: Allow
                Action: ssm:SendCommand
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunPowerShellScript
              - Effect: Allow
                Action: ssm:SendCommand
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-UpdateSSMAgent
              - Effect: Allow
                Action: ssm:SendCommand
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Effect: Allow
                Action:
                  - ssm:DescribeInstanceInformation
                  - ssm:ListCommandInvocations
                  - ssm:ListCommands
                Resource: "*"
        - PolicyName: ec2-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeTags
                  - fsx:DescribeFileSystems
                  - tag:GetResources
                Resource: "*"
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MyInstanceRole

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ebbff1010b2fbd66 # Replace with Windows Server 2022 AMI ID
      InstanceType: 'i3.large'
      KeyName: !Ref KeyName
      UserData: !Base64
        Fn::Join:
          - ""
          - - "<powershell>\n"
            - "New-Item -Path C:\\ -Name log -ItemType Directory \n"
            - 'Start-Transcript -Path C:\\cfn\\log\\Start-DSCConfiguration.txt;'
            - "Start-SSMAutomationExecution -DocumentName "
            - !Sub '"${MySSMDocument}"'
            - ' -Parameter @{"QSS3BucketName"='
            - !Sub '"${QSS3BucketName}"'
            - ';"QSS3BucketRegion"='
            - !Sub '"${QSS3BucketRegion}"'
            - ';"QSS3KeyPrefix"='
            - !Sub '"${QSS3KeyPrefix}"'
            - ';"StackName"='
            - !Sub '"${AWS::StackName}"'
            - ';"URLSuffix"='
            - !Sub '"${AWS::URLSuffix}"'
            - ';"AutomationAssumeRole"='
            - !Sub '"arn:aws:iam::${AWS::AccountId}:role/${MyInstanceRole}"'
            - "}"
            - ";Stop-Transcript;"
            - "</powershell>\n"
      IamInstanceProfile: !Ref MyInstanceProfile
      NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId: !Ref SubnetID
          AssociatePublicIpAddress: true
          GroupSet:
            - 'sg-07e729f0373c790b5'
  #EC2 Volume Creation
  AdditionalVolume:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: 100
      AvailabilityZone:
        Fn::GetAtt:
          - 'MyEC2Instance'
          - 'AvailabilityZone'
      VolumeType: 'gp3'
  #Attach EC2 Volume
  VolumeAttachment:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      InstanceId:
        Ref: 'MyEC2Instance'
      VolumeId:
        Ref: 'AdditionalVolume'
      Device: '/dev/sdf'

  MySSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: Run PowerShell commands on Windows instance
        parameters:
          QSS3BucketName:
            default: aws-quickstart
            description: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
            type: String
          QSS3BucketRegion:
            default: us-east-1
            description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
            type: String
          QSS3KeyPrefix:
            default: quickstart-microsoft-activedirectory/
            description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
            type: String
          URLSuffix:
            description: AWS URL suffix
            type: String
          StackName:
            default: ""
            description: Stack Name Input for cfn resource signal
            type: String
          AutomationAssumeRole:
            default: ""
            description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
            type: String
        mainSteps:
          - name: instance
            maxAttempts: 999
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: tag:aws:cloudformation:stack-name
                  Values: ["{{StackName}}"]
                - Name: instance-state-name
                  Values: ["running"]
            outputs:
              - Name: InstanceId
                Selector: $.Reservations[0].Instances[0].InstanceId
                Type: String
          - name: updateSSMAgent
            action: aws:runCommand
            timeoutSeconds: 300
            inputs:
              DocumentName: AWS-UpdateSSMAgent
              InstanceIds: 
                - "{{instance.InstanceId}}"
          - name: InstallInitializeDisks
            action: aws:runCommand
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds: ["{{instance.InstanceId}}"]
              parameters:
                sourceType: 
                  - "S3"
                sourceInfo:
                  -  !Sub '{"path": "https://${QSS3BucketName}.s3.${URLSuffix}/${QSS3KeyPrefix}scripts/InitializeDisks.ps1"}'
                commandline: './initializeDisks.ps1'
Outputs:
  InstanceId:
    Description: "Instance ID of the Windows Server"
    Value: !Ref MyEC2Instance

  # MyWaitConditionHandle:
  #   Type: AWS::CloudFormation::WaitConditionHandle

  # MyWaitCondition:
  #   Type: AWS::CloudFormation::WaitCondition
  #   DependsOn: MyEC2Instance
  #   Properties:
  #     Handle: !Ref MyWaitConditionHandle
  #     Timeout: '1200'  # Timeout in seconds
  #     Count: 1